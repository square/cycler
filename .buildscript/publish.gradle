class MavenPublishParams {
  String groupId = ''
  String artifactId = ''
  String version = ''
  boolean isSnapshot = true

  def getVersionString() {
    return version + (isSnapshot ? "-SNAPSHOT" : '')
  }
}

def nexusUsername() {
  return hasProperty('SONATYPE_NEXUS_USERNAME') ? SONATYPE_NEXUS_USERNAME : ''
}
def nexusPassword() {
  return hasProperty('SONATYPE_NEXUS_PASSWORD') ? SONATYPE_NEXUS_PASSWORD : ''
}

def getReleaseRepositoryUrl() {
  return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL :
      "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
  return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL :
      "https://s01.oss.sonatype.org/content/repositories/snapshots/"
}

def configurePom(pom, args) {
  pom.groupId = args.groupId
  pom.artifactId = args.artifactId
  pom.version = args.getVersionString()

  pom.project {
    name POM_NAME
    packaging POM_PACKAGING
    description POM_DESCRIPTION
    url POM_URL

    scm {
      url POM_SCM_URL
      connection POM_SCM_CONNECTION
      developerConnection POM_SCM_DEV_CONNECTION
    }

    licenses {
      license {
        name POM_LICENCE_NAME
        url POM_LICENCE_URL
        distribution POM_LICENCE_DIST
      }
    }

    developers {
      developer {
        id POM_DEVELOPER_ID
        name POM_DEVELOPER_NAME
      }
    }
  }
}

def mavenPublishAs(map) {
  // Set defaults as defined above, and also errors if an unexpected argument is defined
  if (map == null) {
    map = [:]
  }

  def args = new MavenPublishParams(map)

  apply plugin: 'maven'
  apply plugin: 'signing'

  version = args.getVersionString()
  group = args.groupId

  afterEvaluate { project ->
    uploadArchives {
      repositories {
        mavenDeployer {
          beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

          repository(url: getReleaseRepositoryUrl()) {
            authentication(userName: nexusUsername(), password: nexusPassword())
          }
          snapshotRepository(url: getSnapshotRepositoryUrl()) {
            authentication(userName: nexusUsername(), password: nexusPassword())
          }

          configurePom(pom, args)
        }
      }
    }

    signing {
      required { !args.isSnapshot && gradle.taskGraph.hasTask("uploadArchives") }
      sign configurations.archives
    }

    task install(type: Upload, dependsOn: assemble) {
      repositories.mavenInstaller {
        configuration = configurations.archives

        configurePom(pom, args)
      }
    }

    task androidSourcesJar(type: Jar) {
      classifier = 'sources'
      from android.sourceSets.main.java.source
    }

    artifacts {
      archives androidSourcesJar
    }
  }
}

ext.mavenPublishAs = this.&mavenPublishAs
